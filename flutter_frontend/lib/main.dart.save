import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Database Assistant',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const DatabaseAssistantPage(),
    );
  }
}

class DatabaseAssistantPage extends StatefulWidget {
  const DatabaseAssistantPage({super.key});

  @override
  State<DatabaseAssistantPage> createState() => _DatabaseAssistantPageState();
}

class _DatabaseAssistantPageState extends State<DatabaseAssistantPage> {
  final TextEditingController _queryController = TextEditingController();
  String _response = '';
  bool _isLoading = false;

  // Updated Railway URL
  final String apiUrl = 'https://database-assistant-clean-production.up.railway.app';

  Future<void> _sendQuery() async {
    final String query = _queryController.text.trim();
    
    if (query.isEmpty) {
      setState(() {
        _response = 'Please enter a query';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _response = 'Sending query...';
    });

    try {
      // Test connection first
      print('Testing connection to: $apiUrl');
      
      final response = await http.post(
        Uri.parse('$apiUrl/query'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode({'query': query}),
      ).timeout(const Duration(seconds: 30));

      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _response = data['response'] ?? 'No response received';
          _isLoading = false;
        });
      } else {
        setState(() {
          _response = 'Error: ${response.statusCode} - ${response.body}';
          _isLoading = false;
        });
      }
    } catch (e) {
      print('Error occurred: $e');
      setState(() {
        _response = 'Connection Error: $e';
        _isLoading = false;
      });
    }
  }

  Future<void> _testConnection() async {
    setState(() {
      _isLoading = true;
      _response = 'Testing connection...';
    });

    try {
      final response = await http.get(
        Uri.parse(apiUrl),
      ).timeout(const Duration(seconds: 10));

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _response = 'Connection Success!\nStatus: ${data['status']}\nMessage: ${data['message']}';
          _isLoading = false;
        });
      } else {
        setState(() {
          _response = 'Connection failed: ${response.statusCode}';
          _isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        _response = 'Connection Error: $e';
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Database Assistant'),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _queryController,
              decoration: const InputDecoration(
                labelText: 'Enter your query',
                border: OutlineInputBorder(),
              ),
              maxLines: 3,
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: _isLoading ? null : _sendQuery,
                    child: _isLoading 
                        ? const CircularProgressIndicator(color: Colors.white)
                        : const Text('Send Query'),
                  ),
                ),
                const SizedBox(width: 16),
                ElevatedButton(
                  onPressed: _isLoading ? null : _testConnection,
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
                  child: const Text('Test Connection'),
                ),
              ],
            ),
            const SizedBox(height: 20),
            Expanded(
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: SingleChildScrollView(
                  child: Text(
                    _response.isEmpty ? 'Response will appear here...' : _response,
                    style: const TextStyle(fontSize: 14),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 10),
            Text(
              'Backend: $apiUrl',
              style: const TextStyle(fontSize: 12, color: Colors.grey),
            ),
          ],
        ),
      ),
    );
  }
}
